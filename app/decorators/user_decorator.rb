class UserDecorator < Draper::Base
  decorates :user


  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
  
  
  
  def profile_about
    profile.about || ""
  end
  
  def featured_avatar(size = :mini)
    profile.featured_avatar(size) if user
  end
  
  def followings
    UserDecorator.decorate(Follow.where(follower_id: user.id, follower_type: 'User').map(&:followable))
  end
  
  def followers
    UserDecorator.decorate(Follow.where(followable_id: user.id, followable_type: 'User').map(&:follower))
  end
  
  def profile_path
    profile.username.present? ? "/#{self.profile.username}" : "/profile/#{user.id}"
  end
  
  def profile_url
    profile.username.present? ? h.personal_urls_url(user) : h.profile_url(user)
  end
  
  def sample_collections(size = 12)
    CollectionDecorator.decorate(collections.limit(size))
  end

  def products_size
    brand.products.active.count
  end

  def sample_products(size = 20)
    @products = user.artist? ? brand.products.active.limit(size) : likes.map(&:likeable)
    @products = ProductDecorator.decorate(@products).map(&:json_to_browse) unless @products.blank?
    @products
  end

  def products_for_profile
    products = self.sample_products
    puts 'produc' + products.to_yaml
    products.blank? ? products : products.to_json.html_safe
  end

  def artist_to_json
    featured_product = ProductDecorator.decorate(brand.products.active.first)
    {
      profile_path: profile_path,
      featured_artwork: profile.avatar(:profile),
      image_height: featured_product.small_image_height,
      about:  profile_about,
      artworks_count: brand.products.active.count,
      name: name
    }
  end

  def hallist_to_json
    featured_product = CollectionDecorator.decorate(collections.first)
    {
      profile_path: profile_path,
      featured_artwork: featured_product.featured_image,
      image_height: featured_product.small_image_height,
      collections_count: collections.count,
      about:  profile_about,
      name: name
    }
  end

end
