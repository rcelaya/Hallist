class CollectionDecorator < Draper::Base
  decorates :collection
  decorates_association :products

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
  
  def featured_image(image_size = :small, cache= true)
    cart_items.first ? ProductDecorator.new(cart_items.first.variant.product).featured_image(image_size, cache) : "no_image_#{image_size.to_s}.jpg"
  end
  
  def small_image_height
    product = cart_items.first ? ProductDecorator.new(cart_items.first.variant.product) : nil
    if product && product.small_image_height.present?
      product.small_image_height
    else
      '220'
    end
  end
  
  def json_to_browse
    { featured_image: featured_image,
      collection_path: "/collections/#{collection.id}",
      name: collection.name,
      description: collection.description,
      artworks_count: collection.cart_items_count}
  end
end
